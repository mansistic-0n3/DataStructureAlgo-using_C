#include <stdio.h>  
#include <string.h>  
#include <stdlib.h>  
  
//Represents the node of the list.  
  
struct node{  
    int data;  
    struct node *next;  
};  
  
//Declaring head and tail pointer as null.  
struct node *head = NULL;  
struct node *tail = NULL;  
  
//This function will add the new node at the end of the list.  
void add(int data){  
    //Create new node  
    struct node *newNode = (struct node*)malloc(sizeof(struct node));  
    newNode->data = data;  
    //Checks if the list is empty.  
    if(head == NULL){  
        //If list is empty, both head and tail would point to new node.  
        head = newNode;  
        tail = newNode;  
        newNode->next = head;  
    }else {  
        //tail will point to new node.  
tail->next = newNode;  
//New node will become new tail.  
tail = newNode;  
//Since, it is circular linked list tail will point to head.  
tail->next = head;  
}  
}  
  
//This function sorts the list in ascending order  
void sortList() {  
//Current will point to head  
struct node *current = head, *index = NULL;  
int temp;  
if(head == NULL) {  
printf("List is empty");  
}  
else {  
do{  
//Index will point to node next to current  
index = current->next;  
while(index != head) {  
//If current node is greater than index data, swaps the data  
if(current->data > index->data) {  
temp =current->data;  
current->data= index->data;  
index->data = temp;  
}  
index= index->next;  
}  
current =current->next;  
}while(current->next != head);   
}  
}  
//This function will display the nodes of circular linked list  
void display(){  
    struct node *current = head;  
    if(head == NULL){  
        printf("List is empty");  
    }  
    else{  
do{  
     //Prints each node by incrementing pointer.  
printf("%d ", current->data);  
current = current->next;  
}while(current != head);  
printf("\n");  
    }  
}  
      
int main()  
{  
   //Adds data to the list  
   add(70);  
   add(90);  
   add(20);  
   add(100);  
   add(50);  
   //Displaying original list  
   printf("Original list: \n");  
   display();  
   //Sorting list  
   sortList();  
   //Displaying sorted list  
   printf("Sorted list: \n");  
   display();  
     
   return 0;  
}
